generator client {
  provider = "prisma-client-js"
  output   = "../src/core/lib/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_psg")
}

model User {
  id               Int      @id @default(autoincrement())
  name             String
  lastName         String?
  email            String   @unique
  password         String
  verificationCode String?
  isVerified       Boolean  @default(false)
  role             Role     @default(CLIENT)
  phone            String?
  avatar           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relaciones
  professionalProfile        ProfessionalProfile?
  appointmentsAsClient       Appointment[]         @relation("ClientAppointments")
  appointmentsAsProfessional Appointment[]         @relation("ProfessionalAppointments")
  reviewsGiven               Review[]              @relation("ReviewClient")
  reviewsReceived            Review[]              @relation("ReviewProfessional")
  verificationAttempts       VerificationAttempt[]
  passwordResets             PasswordReset[]
  notifications              Notification[]
  customConfig               CustomConfig?
}

model VerificationAttempt {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  // Opcional: puedes relacionarla con otras entidades
  appointmentId Int?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
}

model ProfessionalProfile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  specialtyId  Int
  description  String
  certificates Json // [{ name, issuedBy, date }]
  socialLinks  Json? // { facebook, instagram, linkedin }
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  specialty Specialty  @relation(fields: [specialtyId], references: [id])
  services  Service[]
  schedules Schedule[]
}

model Review {
  id             Int      @id @default(autoincrement())
  rating         Int
  comment        String?
  clientId       Int
  professionalId Int
  appointmentId  Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  client       User        @relation("ReviewClient", fields: [clientId], references: [id])
  professional User        @relation("ReviewProfessional", fields: [professionalId], references: [id])
  appointment  Appointment @relation(fields: [appointmentId], references: [id])
}

model Specialty {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  professionals ProfessionalProfile[]
}

model Service {
  id              Int      @id @default(autoincrement())
  name            String
  description     String
  durationMinutes Int
  price           Float
  professionalId  Int
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  professional ProfessionalProfile @relation(fields: [professionalId], references: [id])
  appointments Appointment[]
}

model Schedule {
  id             Int      @id @default(autoincrement())
  professionalId Int
  dayOfWeek      Int
  startTime      String // “HH:MM”
  endTime        String // “HH:MM”
  isAvailable    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional ProfessionalProfile @relation(fields: [professionalId], references: [id])

  @@unique([professionalId, dayOfWeek, startTime])
}

model GuestClient {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
}

model Appointment {
  id             Int               @id @default(autoincrement())
  clientId       Int?
  guestClientId  Int?
  serviceId      Int
  professionalId Int
  date           DateTime
  startTime      String // “HH:MM”
  status         AppointmentStatus @default(PENDING)
  paymentStatus  PaymentStatus     @default(PENDING)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  client        User?          @relation("ClientAppointments", fields: [clientId], references: [id])
  guestClient   GuestClient?   @relation(fields: [guestClientId], references: [id])
  service       Service        @relation(fields: [serviceId], references: [id])
  professional  User           @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  review        Review?
  notifications Notification[]

  @@unique([professionalId, date, startTime])
  @@index([clientId, status])
  @@index([professionalId, status])
}

model CustomConfig {
  id                   Int         @id @default(autoincrement())
  userId               Int         @unique
  language             String?     @default("es")
  theme                String?     @default("light")
  preferences          Json?
  notificationsEnabled Boolean     @default(true)
  layout               LayoutType? // <- ahora es enum
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  PROFESSIONAL
  CLIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum LayoutType {
  SIDEBAR
  TOPBAR
}
